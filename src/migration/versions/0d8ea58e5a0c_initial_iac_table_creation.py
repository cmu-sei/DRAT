#------------------------------------------------------------------------------
# DRAT Prototype Tool Source Code
# 
# Copyright 2019 Carnegie Mellon University. All Rights Reserved.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING 
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS
# TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE
# OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE
# MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND
# WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see license.txt or contact
# permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for non-US
# Government use and distribution.
# 
# This Software includes and/or makes use of the following Third-Party
# Software subject to its own license:
# 
# 1. Python 3.7 (https://docs.python.org/3/license.html)
# Copyright 2001-2019 Python Software Foundation.
# 
# 2. SQL Alchemy (https://github.com/sqlalchemy/sqlalchemy/blob/master/LICENSE)
# Copyright 2005-2019 SQLAlchemy authors and contributor.
# 
# DM19-0055
#------------------------------------------------------------------------------

"""Initial IaC table creation

Revision ID: 0d8ea58e5a0c
Revises: 
Create Date: 2018-08-15 11:18:23.554114

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision = '0d8ea58e5a0c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():

    # Custom SQL to create schema and stored proc
    conn = op.get_bind()
    conn.execute(
        text(
            """
CREATE SCHEMA AUTHORIZATION iac
            """
        )
    )

    conn.execute(
        text(
            """

CREATE OR REPLACE FUNCTION resolve_symlink(location VARCHAR, target VARCHAR)
  RETURNS VARCHAR AS
$$
DECLARE
  resolved VARCHAR;
  rev VARCHAR;
  link_path VARCHAR := substring ( location FROM '^((?:[^/]*/)*)(.*)' );
  parent_count int := 0;
BEGIN
  IF target LIKE '/%' THEN
    RETURN target;
  END IF;

  WHILE SUBSTRING(target, 1, 3) = '../' LOOP
    target := SUBSTRING(target, 4);
    parent_count := parent_count + 1;
  END LOOP;

  IF parent_count = 0 THEN
    return link_path || target;
  ELSE
    resolved := link_path;

    FOR counter IN 1..parent_count LOOP
      rev := LTRIM(REVERSE(resolved), '/');
      rev := SUBSTRING(rev, STRPOS(rev, '/') + 1);
      resolved := REVERSE(rev);
    END LOOP;

    RETURN resolved || '/' || target;
  END IF;
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql' IMMUTABLE
SECURITY DEFINER;
            """
        ),
    )

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('file_storage',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('file_type', sa.String(length=1), nullable=False),
    sa.Column('file_data', sa.LargeBinary(), nullable=True),
    sa.CheckConstraint("file_type in ('P', 'C', 'B')", name='file_storage_c01'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('systems',
    sa.Column('system_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('remote_name', sa.String(length=128), nullable=False),
    sa.Column('os_distro', sa.String(length=24), nullable=True),
    sa.Column('os_major_ver', sa.Integer(), nullable=True),
    sa.Column('os_minor_ver', sa.Integer(), nullable=True),
    sa.Column('os_revision', sa.Integer(), nullable=True),
    sa.Column('kernel_version', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('system_id'),
    sa.UniqueConstraint('name', name='systems_u01')
    )
    op.create_table('app_infomation',
    sa.Column('app_id', sa.BigInteger(), nullable=False),
    sa.Column('system_id', sa.Integer(), nullable=False),
    sa.Column('doc', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['system_id'], ['systems.system_id'], ),
    sa.PrimaryKeyConstraint('app_id')
    )
    op.create_table('file_detail',
    sa.Column('file_detail_id', sa.BigInteger(), nullable=False),
    sa.Column('system_id', sa.Integer(), nullable=False),
    sa.Column('file_location', sa.String(length=1024), nullable=False),
    sa.Column('file_type', sa.String(length=1), nullable=False),
    sa.Column('owner_uid', sa.Integer(), nullable=False),
    sa.Column('owner_gid', sa.Integer(), nullable=False),
    sa.Column('owner_name', sa.String(length=32), nullable=True),
    sa.Column('owner_group', sa.String(length=32), nullable=True),
    sa.Column('file_mode', sa.String(length=6), nullable=True),
    sa.Column('file_perm_mode', sa.String(length=6), nullable=True),
    sa.Column('file_target', sa.String(length=1024), nullable=True),
    sa.Column('target_type', sa.String(length=1), nullable=True),
    sa.Column('file_info', sa.String(length=1024), nullable=True),
    sa.Column('md5_digest', sa.String(length=32), nullable=True),
    sa.Column('sha256_digest', sa.String(length=64), nullable=True),
    sa.Column('origin', sa.String(length=20), nullable=True),
    sa.Column('fetch_file', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['system_id'], ['systems.system_id'], ),
    sa.PrimaryKeyConstraint('file_detail_id'),
    sa.UniqueConstraint('system_id', 'file_location', name='file_detail_u01')
    )
    op.create_index('file_detail_i01', 'file_detail', ['file_type'], unique=False)
    op.create_index('file_detail_i02', 'file_detail', ['system_id'], unique=False)
    op.create_index('file_detail_i03', 'file_detail', ['origin'], unique=False)
    op.create_table('rpm_info',
    sa.Column('rpm_info_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=48), nullable=False),
    sa.Column('version', sa.String(length=24), nullable=True),
    sa.Column('release', sa.String(length=128), nullable=True),
    sa.Column('architecture', sa.String(length=24), nullable=True),
    sa.Column('filename', sa.String(length=256), nullable=True),
    sa.Column('installation_tid', sa.Integer(), nullable=True),
    sa.Column('installation_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['system_id'], ['systems.system_id'], ),
    sa.PrimaryKeyConstraint('rpm_info_id'),
    sa.UniqueConstraint('system_id', 'name', 'version', 'architecture', name='rpm_info_u01')
    )
    op.create_index('rpm_info_i01', 'rpm_info', ['installation_tid'], unique=False)
    op.create_table('rpm_detail',
    sa.Column('rpm_detail_id', sa.BigInteger(), nullable=False),
    sa.Column('rpm_info_id', sa.Integer(), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=False),
    sa.Column('file_location', sa.String(length=256), nullable=True),
    sa.Column('file_size', sa.BigInteger(), nullable=True),
    sa.Column('digest', sa.String(length=64), nullable=True),
    sa.Column('file_info', sa.String(length=1024), nullable=True),
    sa.Column('file_flag', sa.String(length=64), nullable=True),
    sa.Column('file_changed', sa.Boolean(), nullable=True),
    sa.Column('file_exists', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['rpm_info_id'], ['rpm_info.rpm_info_id'], ),
    sa.ForeignKeyConstraint(['system_id'], ['systems.system_id'], ),
    sa.PrimaryKeyConstraint('rpm_detail_id')
    )
    op.create_index('rpm_detail_i01', 'rpm_detail', ['system_id', 'file_location'], unique=False)
    op.create_index('rpm_detail_i02', 'rpm_detail', ['rpm_info_id'], unique=False)
    op.create_index('rpm_detail_i03', 'rpm_detail', ['system_id'], unique=False)
    op.create_table('rpm_detail_patch_storage_link',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('file_storage_id', sa.Integer(), nullable=True),
    sa.Column('rpm_detail_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['file_storage_id'], ['file_storage.id'], ),
    sa.ForeignKeyConstraint(['rpm_detail_id'], ['rpm_detail.rpm_detail_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('file_storage_id', 'rpm_detail_id', name='rpm_detail_patch_storage_link_u01')
    )
    op.create_table('rpm_file_detail_link',
    sa.Column('rpm_file_detail_link_id', sa.BigInteger(), nullable=False),
    sa.Column('file_detail_id', sa.BigInteger(), nullable=True),
    sa.Column('rpm_detail_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['file_detail_id'], ['file_detail.file_detail_id'], ),
    sa.ForeignKeyConstraint(['rpm_detail_id'], ['rpm_detail.rpm_detail_id'], ),
    sa.PrimaryKeyConstraint('rpm_file_detail_link_id'),
    sa.UniqueConstraint('file_detail_id', 'rpm_detail_id', name='rpm_file_detail_link_u01')
    )
    op.create_index('rpm_file_detail_link_i01', 'rpm_file_detail_link', ['rpm_detail_id'], unique=False)
    # ### end Alembic commands ###

    # Custom SQL for recursive view
    conn.execute(
        text(
            """
CREATE OR REPLACE VIEW resolved_symlinks AS
  WITH RECURSIVE symlinks AS (
    SELECT
        fd.system_id
         ,fd.file_detail_id
         , CAST ( NULL AS BIGINT) AS prev_file_detail_id
         ,fd.file_location
         ,fd.file_target
         , resolve_symlink ( fd.file_location, fd.file_target ) AS resolved_location
         ,fd.target_type
         , 0                                                    AS level_number
    FROM file_detail fd
    WHERE
            fd.file_type = 'S'
        AND COALESCE (fd.target_type, '') <> 'S'
    UNION ALL
    SELECT
        fd2.system_id
         ,fd2.file_detail_id
         ,sss.file_detail_id AS prev_file_detail_id
         ,fd2.file_location
         ,fd2.file_target
         , resolve_symlink ( fd2.file_location, fd2.file_target ) AS resolved_location
         ,fd2.target_type
         ,sss.level_number + 1                                   AS level_number
    FROM file_detail fd2
         JOIN symlinks sss ON (fd2.file_detail_id <> sss.file_detail_id
                                 AND fd2.system_id = sss.system_id
                                 AND resolve_symlink(fd2.file_location, fd2.file_target) = sss.file_location
            )
    WHERE fd2.file_type = 'S'
  )
  SELECT
      system_id
       ,file_detail_id
       ,prev_file_detail_id
       ,file_location
       ,file_target
       ,resolved_location
       ,target_type
  FROM symlinks
        """
        )
    )

    conn.execute(
        text(
            """
CREATE INDEX file_detail_f01 ON file_detail ( resolve_symlink ( file_location, file_target)) WHERE file_type = 'S'    
            """
        )
    )


def downgrade():
    #  :nuke: everything
    conn = op.get_bind()
    conn.execute(
        text(
            """
DROP SCHEMA iac CASCADE;
            """
        )
    )

